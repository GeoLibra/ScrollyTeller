narrationId,marginTopVh,marginBottomVh,minHeightVh,h2Text,paragraphText,hRef,hRefText,trigger,graphTitle,graphCaption
,40,40,50,Building a data story with ScrollyTeller,"In this example, we build a simple data story using Hans Rosling's famous ""Wealth and Health of Nations"" animated bubble plot.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""yearProgress"": 0,
	""year"": 1950
}",The Wealth and Health of Nations,"See Hans Rosling's excellent summary video on this chart (with updated data) <a href=""https://www.gapminder.org/answers/how-does-income-relate-to-life-expectancy/"" target=blank>here.</a>"
,40,40,50,The chart,"We'll assume that you can create your own chart component, as we have done here.<br><br>Our <strong>WealthAndHealthOfNations</strong> chart component has a constructor  <strong>new WealthAndHealthOfNations({ data })</strong> function that intially renders the chart, and a <strong>render({ year })</strong> method that updates the chart with data for the specified year.",,,"{
	""yearProgress"": 0,
	""snippet"": null
}",The Wealth and Health of Nations,"See Hans Rosling's excellent summary video on this chart (with updated data) <a href=""https://www.gapminder.org/answers/how-does-income-relate-to-life-expectancy/"" target=blank>here.</a>"
,40,40,50,The final result,"Eventually, we'll want to animate this chart to tell an exciting story, so here's what we're going for: triggering some chart actions based on scroll events or scroll progress.",,,"{
	""yearProgress"": ""$progress"",
	""svgFileName"": null,
	""snippet"": null
}",The Wealth and Health of Nations,"See Hans Rosling's excellent summary video on this chart (with updated data) <a href=""https://www.gapminder.org/answers/how-does-income-relate-to-life-expectancy/"" target=blank>here.</a>"
,40,40,50,Configuring ScrollyTeller,Let's look at how we can use ScrollyTeller configuration to create a chart-based data story like this.,,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""svgFileName"": ""slide5"",
	""yearProgresst"": 1,
	""snippet"": null,
	""highlight"":  null
}",,
,40,40,50,Configuring ScrollyTeller,The code snippet to the right shows the JavaScript configuration object that specifies how the data story is constructed.,,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""yearProgress"": 1,
	""svgFileName"": null,
	""snippet"": ""scrollyTellerConfig"",
	""highlight"":  ""4""
}",,
,40,40,50,Configuring ScrollyTeller,"This sample data story has 2 different 'sections':  'intro' and 'wealthAndHealth'.<br><br>Each section contains a configuration object that encapsulates narration (the scrolling text boxes that narrate the story), data, graph rendering code, and event handling code to trigger graph events when narration scrolls into view.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""scrollyTellerConfig"",
	""highlight"":  ""1,2""
}",,
,40,40,50,App Container Id,"The <strong>story</strong> object contains two properties: 1) an <strong>appContainerId</strong>, which defines the <strong>div</strong> id to render the scrolling content into, and . . .",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""scrollyTellerConfig"",
	""highlight"": ""5""
}",,
,40,40,50,Section List,2) a <strong>sectionList</strong> object that contains configurations for each of the different sections.,,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""scrollyTellerConfig"",
	""highlight"": ""7,8,9,10,11,12""
}",,
,40,40,50,Rendering the story,"To build the HTML for the story, we create a ScrollyTeller instance and call the render() function to create the DOM elements.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""scrollyTellerConfig"",
	""highlight"": ""14,15, 16""
}",,
,40,40,50,Section Configuration,"Next, we'll look at how we define the <strong>wealthAndHealth</strong> object defined on line 2 and included in the story's <strong>sectionList</strong>.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""scrollyTellerConfig"",
	""highlight"": null,
	""highlight"": ""2,10""
}",,
,40,40,50,Section configuration,This code snippet expands the wealthAndHealth section configuration from the previous story rendering code.,,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigSummary"",
	""highlight"": ""1""
}",,
,40,40,50,Section Configuration,"The section config object must contain a unique <strong>sectionIdentifier</strong> (string), which is useful for creating css selectors and uniquely identifying each section.<br><br>For example, ScrollyTeller builds this section within a div with id=""section_wealthAndHealth"", and our graph will be contained within a div with id=""graph_wealthAndHealth"".",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigSummary"",
	""highlight"": ""2""
}",,
,40,40,50,Section Configuration,"The section config object also contains:<br><br>1) <strong>Data Paths/Promises</strong> for the narration and graph-specific data,<br><br>2) <strong>Initial render functions</strong> called upon ScrollyTeller.render(), and<br><br>3) <strong>Event based functions</strong> that respond to scroll and resize events.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigSummary"",
	""highlight"": ""4,8,12""
}",,
,40,40,50,Fetch & Render,Let's walk through what happens when ScrollyTeller.render() is called for our Wealth and Health of Nations story.  The same process occurs for each section in the data story.,,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigSummary"",
	""highlight"": ""4,8,12""
}",,
,40,40,50,Fetch & Render: Narration,"First, ScrollyTeller asynchronously fetches the contents of <strong>narration.csv</strong>.<br><br>Narration, which must be in a specific format, is immediately rendered to create a ""stack"" of narration elements that the user can scroll through.<br><br>We'll explore the structure of the narration.csv and the generated HTML later, as well as how to link narration to chart actions.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigFlow"",
	""highlight"": ""2,3,4,5,6""
}",,
,40,40,50,Fetch & Render: Graph Data,"While fetching narration, ScrollyTeller also fetches the contents of <strong>wealthAndHealthData.json</strong> for the graph.<br><br>Graph data can be one of:<br>1) a path to any file format readable by d3-fetch (csv, json, tsv, xml, html),<br>2) an array of data, or<br>3) a Promise, which can resolve to return any format you choose.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigFlow"",
	""highlight"": ""8""
}",,
,40,40,50,Fetch & Render: Reshaping data,"The graph-specific data is passed to <strong>reshapeDataFunction()</strong>, which can perfom operations like converting strings to numbers, computing data ranges, etc.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigFlow"",
	""highlight"": ""8,9,10,11,12""
}",,
,40,40,50,Reshape Data Function,Let's look in more depth at the <strong>reshapeDataFunction()</strong>`.,,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigFlow"",
	""highlight"": ""11,12,13,14""
}",,
,40,40,50,Reshape Data Function,"Once the DOM elements exist, <strong>reshapeDataFunction()</strong> is passed the results of the data fetch (<strong>rawData</strong>). (If you specified the <strong>data</strong> property as a Promise, the <strong>rawData</strong> argment will contain whatever your Promise resolves to.)<br><br>In the code example here, we compute min and max values for the data ranges to pass to our graph component.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigReshapeDemoData"",
	""highlight"": ""2,3,4""
}",,
,40,40,50,Reshape Data,"Notice that we return the results of the data as an object with some useful properties. This result is attached to a <strong>sectionConfig.data</strong> property that is passed to subsequent functions for easy access.<br><br>Next, we'll look at building the graph.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigReshapeDemoData"",
	""highlight"": ""10,11,12,13,14,15,16""
}",,
,40,40,50,Fetch & Render: Graph construction,"The data returned from <strong>reshapeDataFunction()</strong> is then passed to <strong>buildGraphFunction()</strong>, which builds the chart or charts for the section.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigFlow"",
	""highlight"": ""13,14,15,16""
}",,
,40,40,50,Building the Chart,"In the code snippet, <strong>buildGraphFunction</strong> receives <strong>graphId</strong> and <strong>sectionConfig</strong> arguments.<br><br><strong>graphId</strong> is the id of the div to target to build the graph.<br><br><strong>sectionConfig</strong> is an object containing a variety of props, but most importantly, the <strong>data</strong> prop, which is the return value of <strong>reshapeDataFunction</strong>.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigBuildGraph"",
	""highlight"": ""3""
}",,
,40,40,50,Building the Chart,"Next, we use some object destructuring (ES6 fanciness) to get data props from <strong>sectionConfig.data</strong>. Notice that we're using <strong>dataArray</strong>, which was computed in <strong>reshapeDataFunction()</strong> and returned as a property (<strong>sectionConfig.data.dataArray</strong>)",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigBuildGraph"",
	""highlight"": ""4,5,6,7""
}",,
,40,40,50,Building the Chart,"Finally, we build our chart component with the data.  Here we gloss over the details and just create an instance of a custom component called <strong>WealthAndHealthOfNations</strong>, which takes a css selector to target the <strong>graphId</strong> div and builds the graph using the data and properties we calculated in <strong>reshapeDataFunction()</strong>.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigBuildGraph"",
	""highlight"": ""9,10,11,12,13,14""
}",,
,40,40,50,Building the Chart,"Remember to return the graph instance! The return value of this function is available as <strong>sectionConfig.graph</strong> when passed to each of the event handlers,",,,"{
	""year"": 1950,
	""yearProgress"": 0,
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigBuildGraph"",
	""highlight"": ""16,17"",
	""svgFileName"": null
}",,
,40,40,50,The rendered chart,"At this point, the basic structure of the DOM should be rendered, along with the chart that we created.",,,"{
	""year"": 1950,
	""yearProgress"": 0,
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": null,
	""highlight"": null,
	""svgFileName"": null
}",,
,40,40,50,Triggering narration events,Now let's look at how to trigger events in the chart when narration scrolls into view.,,,"{
	""year"": 1950,
	""yearProgress"": 0,
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": null,
	""highlight"": null,
	""svgFileName"": ""slide2""
}",,
,40,40,50,Fetch & Render: Event handling,"Once the chart and narration are rendered, the page is ready for user interactions via the event handlers: <strong>onActivateNarrationFunction()</strong>, <strong>onScrollFunction()</strong>, and <strong>onResizeFunction()</strong>.<br><br>Each section's <strong>sectionConfig: { data, graph }</strong> object is passed to the user event functions when scroll events are triggered and narration blocks become active.",,,"{
	""containerStyle"": {
		""opacity"": 1
	},
	""snippet"": ""sectionConfigFlow"",
	""highlight"": ""17,18,19,20,21"",
	""svgFileName"": null
}",,
1,40,40,50,"The Famous ""Wealth And Health of Nations""","This data is from gapminder.org, and the chart was modified from <a href=""https://robisateam.github.io/courses/d3-course/"" target=""blank"">this excellent d3 tutorial</a>",https://www.gapminder.org/,Data from gapminder.org,"{
	""year"": 1950,
	""yearProgress"": 0,
	""snippet"": null
}",The Wealth and Health of Nations,"See Hans Rosling's excellent summary video on this chart (with updated data) <a href=""https://www.gapminder.org/answers/how-does-income-relate-to-life-expectancy/"" target=blank>here</a>."
2,40,40,80,Triggering events when narration blocks are entered,"Here we used a custom trigger ""year:2008"", which is received as the prop  <strong>state.year (= 2008)</strong> by <code>onActivateNarrationFunction() </code>",,,"{
	""year"": 2008,
	""yearProgress"": null,
	""snippet"": null
}",The Wealth and Health of Nations,
2,40,40,80,Triggering events when narration blocks are entered,"Set the trigger again to change year ""year:1950"". <strong>state.year = 1950</strong>",,,"{
	""year"": 1950,
	""yearProgress"": null,
	""snippet"": null
}",The Wealth and Health of Nations,
2,40,40,100,Rendering years as progress,"Setting a yearProgress variable to the progress through the view<br>Here we used a custom trigger ""yearProgress:$progress"", which is received as the prop  <strong>state.yearProgress = progress 0 -> 1</strong> by <i>scrollyTellerConfig.onScrollFunction()</i>",,,"{
	""yearProgress"": ""$progress"",
	""snippet"": null
}",The Wealth and Health of Nations,
7,50,50,80,The end,,https://stash.ihme.washington.edu/projects/VIZ/repos/scrolly-teller/browse,Here's a link to the scrolly-teller repo,"{
	""containerStyle"": {
		""opacity"": ""calc(1 - $progress)""
	},
	""snippet"": null
}",The Wealth and Health of Nations,
